# roles/miscellaneous/tasks/main.yml
---
- name: Create tools directory
  file:
    path: "{{ tools_dir }}"
    state: directory
    mode: '0755'

# Feroxbuster Installation
- name: Check if feroxbuster binary exists
  stat:
    path: "/usr/local/bin/feroxbuster"
  register: feroxbuster_bin

- block:
    - name: Determine if system is 32 or 64 bit Linux
      set_fact:
        is_linux32: "{{ ansible_facts['architecture'] == 'i686' }}"
        is_linux64: "{{ ansible_facts['architecture'] == 'x86_64' }}"

    - name: Set download URL for 32-bit Linux
      set_fact:
        feroxbuster_url: "https://github.com/epi052/feroxbuster/releases/latest/download/x86-linux-feroxbuster.zip"
      when: is_linux32

    - name: Set download URL for 64-bit Linux
      set_fact:
        feroxbuster_url: "https://github.com/epi052/feroxbuster/releases/latest/download/x86_64-linux-feroxbuster.zip"
      when: is_linux64

    - name: Download Feroxbuster binary
      get_url:
        url: "{{ feroxbuster_url }}"
        dest: "/tmp/feroxbuster.zip"
        mode: '0644'

    - name: Unzip Feroxbuster binary
      unarchive:
        src: "/tmp/feroxbuster.zip"
        dest: "/usr/local/bin"
        remote_src: yes
        mode: '0755'

    - name: Ensure Feroxbuster is executable
      file:
        path: "/usr/local/bin/feroxbuster"
        mode: '0755'
        state: file
  when: not feroxbuster_bin.stat.exists
# Amass v3 Installation
- name: Check if amass-v3 binary exists
  stat:
    path: "/usr/local/bin/amass-v3"
  register: amass_bin

- block:
    - name: Download Amass v3.19.3
      get_url:
        url: "https://github.com/OWASP/Amass/releases/download/v3.19.3/amass_linux_amd64.zip"
        dest: "/tmp/amass.zip"
        mode: '0644'

    - name: Create temporary directory for amass
      file:
        path: "/tmp/amass_extract"
        state: directory
        mode: '0755'

    - name: Unzip Amass binary
      unarchive:
        src: "/tmp/amass.zip"
        dest: "/tmp/amass_extract"
        remote_src: yes

    - name: Move amass binary to /usr/local/bin
      copy:
        src: "/tmp/amass_extract/amass_linux_amd64/amass"
        dest: "/usr/local/bin/amass-v3"
        mode: '0755'
        remote_src: yes

  when: not amass_bin.stat.exists

# Assetfinder Installation
- name: Check if assetfinder binary exists
 stat:
   path: "/usr/local/bin/assetfinder"
 register: assetfinder_bin

- block:
   - name: Download Assetfinder v0.1.1
     get_url:
       url: "https://github.com/tomnomnom/assetfinder/releases/download/v0.1.1/assetfinder-linux-amd64-0.1.1.tgz"
       dest: "/tmp/assetfinder.tar.gz"
       mode: '0644'

   - name: Extract assetfinder binary
     unarchive:
       src: "/tmp/assetfinder.tar.gz"
       dest: "/usr/local/bin/"
       remote_src: yes
       mode: '0755'

 when: not assetfinder_bin.stat.exists

# Getallurls Installation
- name: Check if getallurls binary exists
 stat:
   path: "/usr/local/bin/getallurls"
 register: getallurls_bin

- block:
   - name: Download getallurls (gau) v2.1.1
     get_url:
       url: "https://github.com/lc/gau/releases/download/v2.1.1/gau_2.1.1_linux_amd64.tar.gz"
       dest: "/tmp/gau.tar.gz"
       mode: '0644'

   - name: Extract and rename gau binary to getallurls
     unarchive:
       src: "/tmp/gau.tar.gz"
       dest: "/usr/local/bin/"
       remote_src: yes
       extra_opts: ['--transform', 's/gau/getallurls/']
       mode: '0755'

 when: not getallurls_bin.stat.exists

# Unfurl Installation
- name: Check if unfurl binary exists
 stat:
   path: "/usr/local/bin/unfurl"
 register: unfurl_bin

- block:
   - name: Download unfurl v0.4.1
     get_url:
       url: "https://github.com/tomnomnom/unfurl/releases/download/v0.4.1/unfurl-linux-amd64-0.4.1.tgz"
       dest: "/tmp/unfurl.tar.gz"
       mode: '0644'

   - name: Extract unfurl binary
     unarchive:
       src: "/tmp/unfurl.tar.gz"
       dest: "/usr/local/bin/"
       remote_src: yes
       mode: '0755'

 when: not unfurl_bin.stat.exists

# MassDNS
- name: Check if massdns directory exists
  stat:
    path: "{{ tools_dir }}/massdns"
  register: massdns_dir

- name: Check if massdns binary exists
  stat:
    path: "/usr/local/bin/massdns"
  register: massdns_bin

- block:
    - name: Clone MassDNS repository
      git:
        repo: "https://github.com/blechschmidt/massdns.git"
        dest: "{{ tools_dir }}/massdns"
        version: master
      when: not massdns_dir.stat.exists

    - name: Build MassDNS
      make:
        chdir: "{{ tools_dir }}/massdns"
        target: all

    - name: Copy MassDNS binary to /usr/local/bin
      copy:
        src: "{{ tools_dir }}/massdns/bin/massdns"
        dest: /usr/local/bin/massdns
        mode: '0755'
        remote_src: yes
  when: not massdns_bin.stat.exists

# Hostess-Pie
- name: Check if Hostess-Pie directory exists
  stat:
    path: "{{ tools_dir }}/Hostess-Pie"
  register: hostess_pie_dir

- name: Clone Hostess-Pie repository
  git:
    repo: "https://github.com/burmat/Hostess-Pie.git"
    dest: "{{ tools_dir }}/Hostess-Pie"
  when: not hostess_pie_dir.stat.exists

- name: Setup Hostess-Pie virtual environment
  pip:
    name: colorama
    virtualenv: "{{ tools_dir }}/Hostess-Pie"
    virtualenv_command: python3 -m venv

# SQLMap
- name: Check if sqlmap directory exists
  stat:
    path: "{{ tools_dir }}/sqlmap"
  register: sqlmap_dir

- name: Clone sqlmap repository
  git:
    repo: "https://github.com/sqlmapproject/sqlmap.git"
    dest: "{{ tools_dir }}/sqlmap"
    version: master
  when: not sqlmap_dir.stat.exists# SQLMap

# NTLMRECON
- name: Check if ntlmrecon directory exists
  stat:
    path: "{{ tools_dir }}/ntlmrecon"
  register: ntlmrecon_dir

- name: Clone ntlmrecon repository
  git:
    repo: "https://github.com/pwnfoo/NTLMRecon.git"
    dest: "{{ tools_dir }}/ntlmrecon"
    version: master
  when: not ntlmrecon_dir.stat.exists

- name: Setup ntlmrecon virtual environment
  pip:
    name: .
    virtualenv: "{{ tools_dir }}/ntlmrecon/venv"
    virtualenv_command: python3 -m venv

# sstimap

- name: Check if sstimap directory exists
  stat:
    path: "{{ tools_dir }}/sstimap"
  register: sstimap_dir

- name: Clone sstimap repository
  git:
    repo: "https://github.com/vladko312/SSTImap.git"
    dest: "{{ tools_dir }}/sstimap"
    version: master
  when: not sstimap_dir.stat.exists

- name: Setup sstimap virtual environment
  pip:
    name: "{{ tools_dir }}/sstimap/requirements.txt"
    virtualenv: "{{ tools_dir }}/sstimap/venv"
    virtualenv_command: python3 -m venv

# porch-pirate    
- name: Check if porch-pirate directory exists
  stat:
    path: "{{ tools_dir }}/porch-pirate"
  register: porch_pirate_dir

- name: Setup porch-pirate virtual environment
  pip:
    name: porch-pirate
    virtualenv: "{{ tools_dir }}/porch-pirate/venv"
    virtualenv_command: python3 -m venv
  when: not porch_pirate_dir.stat.exists

# postleaks

- name: Check if postleaks directory exists
 stat:
   path: "{{ tools_dir }}/postleaks"
 register: postleaks_dir

- name: Setup postleaks virtual environment
 pip:
   name: postleaks
   virtualenv: "{{ tools_dir }}/postleaks/venv"
   virtualenv_command: python3 -m venv
 when: not postleaks_dir.stat.exists

# FGDS (Fast Google Dorks Scan)
- name: Check if FGDS directory exists
  stat:
    path: "{{ tools_dir }}/Fast-Google-Dorks-Scan"
  register: fgds_dir

- name: Clone FGDS repository
  git:
    repo: "https://github.com/IvanGlinkin/Fast-Google-Dorks-Scan.git"
    dest: "{{ tools_dir }}/Fast-Google-Dorks-Scan"
  when: not fgds_dir.stat.exists

# Trevor Tools Installation
- name: Install Trevor tools
  environment:
    PYENV_ROOT: "/root/.pyenv"
    PATH: "/root/.pyenv/bin:{{ ansible_env.PATH }}"
  pip:
    name:
      - "git+https://github.com/blacklanternsecurity/trevorproxy"
      - "git+https://github.com/blacklanternsecurity/trevorspray"
    executable: /root/.pyenv/versions/{{ python_version }}/bin/pip3