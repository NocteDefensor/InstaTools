# roles/environment_prep/tasks/main.yml
---
# System Preparation
- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600
  when: ansible_os_family == "Debian"

- name: Install system dependencies
  package:
    name:
      - git
      - curl
      - wget
      - build-essential
      - python3-pip
      - python3-venv
      - nmap
      - jq
      - make
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - llvm
      - libncursesw5-dev
      - xz-utils
      - tk-dev
      - libxml2-dev
      - libxmlsec1-dev
      - libffi-dev
      - liblzma-dev
      - libpcap-dev
      - ruby
      - tmux
    state: present

- name: Install Chromium browser
  package:
    name: "{{ chromium_package_name }}"
    state: present
  vars:
    chromium_package_name: >-
      {{
        {
          'Ubuntu': 'chromium-browser',
          'Debian': 'chromium',
          'CentOS': 'chromium',
          'Fedora': 'chromium',
          'openSUSE Leap': 'chromium'
        }[ansible_distribution] | default('chromium')
      }}

# Go Installation
- name: Check existing Go installations
  stat:
    path: "{{ item }}"
  register: go_installations
  with_items:
    - "/usr/local/go"
    - "/usr/bin/go"
    - "/usr/local/bin/go"

- name: Remove Go if installed via package manager
  package:
    name: golang
    state: absent
  when: ansible_os_family in ["Debian", "RedHat"]

- name: Remove existing Go installation directories
  file:
    path: "{{ item.stat.path }}"
    state: absent
  when: item.stat.exists
  with_items: "{{ go_installations.results }}"

- name: Download Go
  get_url:
    url: "https://golang.org/dl/go{{ go_version }}.linux-amd64.tar.gz"
    dest: "/tmp/go{{ go_version }}.linux-amd64.tar.gz"
    mode: '0644'

- name: Extract Go
  unarchive:
    src: "/tmp/go{{ go_version }}.linux-amd64.tar.gz"
    dest: /usr/local
    remote_src: yes

- name: Check for existing go lines
  lineinfile:
    path: "{{ shell_rc_file | trim }}"
    line: "{{ item }}"
    state: absent
  check_mode: yes
  register: go_env_check
  with_items:
    - 'export PATH=$PATH:/usr/local/go/bin'
    - 'export GOPATH=/root/go'
    - 'export PATH=$PATH:$GOPATH/bin'

- name: Set Go environment in profile
  blockinfile:
    path: /etc/profile
    marker: "# {mark} ANSIBLE MANAGED BLOCK - GO ENVIRONMENT"
    block: |
      export PATH=$PATH:/usr/local/go/bin
      export GOPATH=/root/go
      export PATH=$PATH:$GOPATH/bin
  when: go_env_check.results | map(attribute='found') | list | min == false

# Pyenv Installation
- name: Download pyenv installer
  get_url:
    url: https://pyenv.run
    dest: /tmp/pyenv-installer
    mode: '0755'

- name: Execute pyenv installer
  command: /tmp/pyenv-installer
  args:
    creates: /root/.pyenv

- name: Check for existing pyenv lines
  lineinfile:
    path: "{{ shell_rc_file | trim }}"
    line: "{{ item }}"
    state: absent
  check_mode: yes
  register: pyenv_check
  with_items:
    - 'export PYENV_ROOT="/root/.pyenv"'
    - 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"'
    - 'eval "$(pyenv init -)"'

- name: Configure pyenv in shell profile
  blockinfile:
    path: "{{ shell_rc_file | trim }}"
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK - PYENV CONFIGURATION"
    block: |
      export PYENV_ROOT="/root/.pyenv"
      command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init -)"
  when: pyenv_check.results | map(attribute='found') | list | min == false

- name: Install Python version with pyenv
  shell: |
    export PYENV_ROOT="/root/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(/root/.pyenv/bin/pyenv init -)"
    /root/.pyenv/bin/pyenv install {{ python_version }} -s
    /root/.pyenv/bin/pyenv global {{ python_version }}
  args:
    executable: "{{ root_user_shell }}"
    creates: "/root/.pyenv/versions/{{ python_version }}"

# Pipx Installation
- name: Install pipx
  environment:
    PYENV_ROOT: "/root/.pyenv"
    PATH: "/root/.pyenv/bin:{{ ansible_env.PATH }}"
  pip:
    name: pipx
    state: latest
    executable: /root/.pyenv/versions/{{ python_version }}/bin/pip3

- name: Check for existing pipx destination path lines
  lineinfile:
    path: "{{ shell_rc_file | trim }}"
    line: "{{ item }}"
    state: absent
  check_mode: yes
  register: pipx_path_check
  with_items:
    - 'export PATH=$PATH:/root/.local/bin'

- name: Add /root/.local/bin to PATH in shell profile
  blockinfile:
    path: "{{ shell_rc_file | trim }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK - ADD /root/.local/bin TO PATH"
    block: |
      export PATH=$PATH:/root/.local/bin
  when: pipx_path_check.results | map(attribute='found') | list | min == false

- name: Rehash pyenv shims after installing pipx
  shell: pyenv rehash
  environment:
    PYENV_ROOT: "/root/.pyenv"
    PATH: "/root/.pyenv/bin:{{ ansible_env.PATH }}"

# TMux and Tmuxinator Setup
- name: Create TMux logging directory
  file:
    path: "{{ tmux_log_path }}"
    state: directory
    mode: '0755'

- name: Create TMux config directory
  file:
    path: /root/.tmux
    state: directory
    mode: '0755'

- name: Configure TMux
  copy:
    dest: /root/.tmux.conf
    content: |
      set-option -g default-shell {{ shell_output.stdout }}
      set -g @plugin 'tmux-plugins/tmux-logging'
      set -g @plugin 'tmux-plugins/tpm'
      set -g @plugin 'tmux-plugins/tmux-sensible'
      set -g history-limit 250000
      set -g allow-rename off
      set -g escape-time 50
      set-window-option -g mode-keys vi
      run '{{ tpm_path }}/tpm'
      run '{{ tpm_path }}/tmux-logging/logging.tmux'
      run '{{ tpm_path }}/tmux-logging/scripts/toggle_logging.sh'
      bind-key "c" new-window \; run-shell "{{ tpm_path }}/tmux-logging/scripts/toggle_logging.sh"
      bind-key '"' split-window \; run-shell "{{ tpm_path }}/tmux-logging/scripts/toggle_logging.sh"
      bind-key "%" split-window -h \; run-shell "{{ tpm_path }}/tmux-logging/scripts/toggle_logging.sh"
    mode: '0644'

- name: Remove existing TPM if present
  file:
    path: "{{ tpm_path }}"
    state: absent

- name: Clone TPM repository
  git:
    repo: https://github.com/tmux-plugins/tpm.git
    dest: "{{ tpm_path }}"
    version: master

- name: Install TMux plugins
  command: /bin/bash {{ tpm_path }}/scripts/install_plugins.sh
  args:
    creates: "{{ tpm_path }}/tmux-logging"

- name: Update logging path in variables.sh
  replace:
    path: "/root/.tmux/plugins/tmux-logging/scripts/variables.sh"
    regexp: 'default_logging_path="\$HOME"'
    replace: 'default_logging_path="{{ tmux_log_path }}"'

- name: Initialize TMux session
  command: tmux new-session -d
  args:
    creates: /tmp/tmux-0
  changed_when: false
      
- name: Source TMux configuration
  command: tmux source-file /root/.tmux.conf
  register: source_result
  changed_when: source_result.rc == 0
  failed_when: false

- name: Install Tmuxinator
  gem:
    name: tmuxinator
    state: present
    user_install: no

- name: Create Tmuxinator config directory
  file:
    path: "{{ tmuxinator_config_path }}"
    state: directory
    mode: '0755'

- name: Configure Tmuxinator
  copy:
    dest: "{{ tmuxinator_config_path }}/default.yml"
    content: |
      name: default
      root: ~/
      windows:
          - main: tmux source /root/.tmux.conf
          - msf: msfconsole
    mode: '0644'